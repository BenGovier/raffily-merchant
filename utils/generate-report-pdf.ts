import jsPDF from "jspdf"
import autoTable from "jspdf-autotable"
import { format } from "date-fns"

// Define types for our report data
interface ReportData {
  companyName: string
  dateRange: {
    start: Date
    end: Date
  }
  metrics: {
    totalEntries: number
    totalRevenue: number
    conversionRate: number
    views: number
    clicks: number
    shares: number
  }
  revenueData: Array<{
    date: string
    value: number
  }>
  engagementData: Array<{
    date: string
    views: number
    clicks: number
    shares: number
  }>
  raffleData: Array<{
    name: string
    startDate: Date
    endDate: Date
    entries: number
    revenue: number
    conversion: number
    roi: number
  }>
}

export function generateReportPDF(data: ReportData): Uint8Array {
  // Create a new PDF document
  const doc = new jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: "a4",
  })

  // Define colors
  const colors = {
    primary: "#2D2A4A", // Deep navy
    secondary: "#00B8A9", // Teal accent
    tertiary: "#FF4D8D", // Pink accent
    text: "#333333",
    lightGray: "#F5F5F5",
  }

  // Helper function to add page header and footer
  const addPageHeaderFooter = (pageNum: number, totalPages: number) => {
    // Header
    doc.setFillColor(colors.primary)
    doc.rect(0, 0, 210, 15, "F")
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(10)
    doc.text("Raffily Performance Report", 15, 10)

    // Date range in header
    const dateRangeText = `${format(data.dateRange.start, "MMM d, yyyy")} - ${format(data.dateRange.end, "MMM d, yyyy")}`
    doc.text(dateRangeText, 195, 10, { align: "right" })

    // Footer
    doc.setFillColor(colors.primary)
    doc.rect(0, 282, 210, 15, "F")
    doc.setTextColor(255, 255, 255)
    doc.text(`Page ${pageNum} of ${totalPages}`, 195, 290, { align: "right" })
    doc.text("Generated by Raffily", 15, 290)
  }

  // Cover Page
  const addCoverPage = () => {
    // Background
    doc.setFillColor(colors.primary)
    doc.rect(0, 0, 210, 297, "F")

    // Logo placeholder (white rectangle)
    doc.setFillColor(255, 255, 255)
    doc.roundedRect(75, 60, 60, 60, 3, 3, "F")
    doc.setTextColor(colors.primary)
    doc.setFontSize(12)
    doc.text("LOGO", 105, 90, { align: "center" })

    // Title
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(28)
    doc.text("Raffle Performance Report", 105, 150, { align: "center" })

    // Company name
    doc.setFontSize(18)
    doc.text(data.companyName, 105, 170, { align: "center" })

    // Date range
    doc.setFontSize(14)
    const dateRangeText = `${format(data.dateRange.start, "MMMM d, yyyy")} - ${format(data.dateRange.end, "MMMM d, yyyy")}`
    doc.text(dateRangeText, 105, 190, { align: "center" })

    // Generation date
    doc.setFontSize(12)
    doc.text(`Generated on: ${format(new Date(), "MMMM d, yyyy")}`, 105, 210, { align: "center" })

    // Bottom decoration
    doc.setFillColor(colors.secondary)
    doc.rect(0, 277, 210, 20, "F")
  }

  // Summary Page
  const addSummaryPage = () => {
    doc.addPage()
    addPageHeaderFooter(2, 4)

    // Page title
    doc.setTextColor(colors.primary)
    doc.setFontSize(20)
    doc.text("Performance Summary", 105, 35, { align: "center" })

    // Summary cards
    const cardWidth = 85
    const cardHeight = 40
    const margin = 15
    const startY = 50

    // Function to draw a metric card
    const drawMetricCard = (x: number, y: number, title: string, value: string, subtitle: string) => {
      // Card background
      doc.setFillColor(255, 255, 255)
      doc.setDrawColor(240, 240, 240)
      doc.roundedRect(x, y, cardWidth, cardHeight, 3, 3, "FD")

      // Title
      doc.setTextColor(colors.primary)
      doc.setFontSize(10)
      doc.text(title, x + 10, y + 12)

      // Value
      doc.setFontSize(18)
      doc.setTextColor(colors.secondary)
      doc.text(value, x + 10, y + 28)

      // Subtitle
      doc.setFontSize(8)
      doc.setTextColor(colors.text)
      doc.text(subtitle, x + 10, y + 36)
    }

    // Draw metric cards (2x3 grid)
    drawMetricCard(margin, startY, "TOTAL ENTRIES", data.metrics.totalEntries.toLocaleString(), "Raffle tickets issued")
    drawMetricCard(
      margin + cardWidth + 10,
      startY,
      "TOTAL REVENUE",
      `$${data.metrics.totalRevenue.toLocaleString()}`,
      "Generated from raffles",
    )

    drawMetricCard(
      margin,
      startY + cardHeight + 10,
      "CONVERSION RATE",
      `${data.metrics.conversionRate.toFixed(2)}%`,
      "Views to entries",
    )
    drawMetricCard(
      margin + cardWidth + 10,
      startY + cardHeight + 10,
      "ENGAGEMENT",
      `${data.metrics.views.toLocaleString()} views`,
      `${data.metrics.clicks.toLocaleString()} clicks, ${data.metrics.shares.toLocaleString()} shares`,
    )

    // Revenue chart title
    doc.setTextColor(colors.primary)
    doc.setFontSize(14)
    doc.text("Revenue Growth", 105, startY + cardHeight * 2 + 30, { align: "center" })

    // Revenue chart placeholder
    doc.setFillColor(colors.lightGray)
    doc.roundedRect(margin, startY + cardHeight * 2 + 40, 180, 70, 3, 3, "F")
    doc.setTextColor(colors.primary)
    doc.setFontSize(10)
    doc.text("Revenue Chart", 105, startY + cardHeight * 2 + 75, { align: "center" })

    // Engagement chart title
    doc.setTextColor(colors.primary)
    doc.setFontSize(14)
    doc.text("User Engagement Trends", 105, startY + cardHeight * 2 + 130, { align: "center" })

    // Engagement chart placeholder
    doc.setFillColor(colors.lightGray)
    doc.roundedRect(margin, startY + cardHeight * 2 + 140, 180, 70, 3, 3, "F")
    doc.setTextColor(colors.primary)
    doc.setFontSize(10)
    doc.text("Engagement Chart", 105, startY + cardHeight * 2 + 175, { align: "center" })
  }

  // Detailed data page
  const addDetailedDataPage = () => {
    doc.addPage()
    addPageHeaderFooter(3, 4)

    // Page title
    doc.setTextColor(colors.primary)
    doc.setFontSize(20)
    doc.text("Raffle Campaign Performance", 105, 35, { align: "center" })

    // Raffle data table
    doc.setFontSize(12)
    doc.text("Detailed Performance by Campaign", 15, 50)

    // Format data for the table
    const tableData = data.raffleData.map((raffle) => [
      raffle.name,
      format(raffle.startDate, "MM/dd/yyyy"),
      format(raffle.endDate, "MM/dd/yyyy"),
      raffle.entries.toLocaleString(),
      `$${raffle.revenue.toLocaleString()}`,
      `${raffle.conversion.toFixed(2)}%`,
      `${raffle.roi.toFixed(2)}%`,
    ])

    // Add the table using autoTable
    autoTable(doc, {
      head: [["Raffle Name", "Start Date", "End Date", "Entries", "Revenue", "Conv. %", "ROI %"]],
      body: tableData,
      startY: 55,
      theme: "grid",
      headStyles: {
        fillColor: [45, 42, 74], // colors.primary in RGB
        textColor: [255, 255, 255],
        fontStyle: "bold",
        halign: "center",
      },
      alternateRowStyles: {
        fillColor: [250, 250, 250],
      },
      margin: { top: 55, right: 15, bottom: 15, left: 15 },
      styles: {
        fontSize: 10,
        cellPadding: 5,
      },
    })
  }

  // Insights page
  const addInsightsPage = () => {
    doc.addPage()
    addPageHeaderFooter(4, 4)

    // Page title
    doc.setTextColor(colors.primary)
    doc.setFontSize(20)
    doc.text("Key Insights & Recommendations", 105, 35, { align: "center" })

    // Insights section
    doc.setFontSize(14)
    doc.text("Performance Insights", 15, 55)

    doc.setFontSize(10)
    doc.setTextColor(colors.text)
    const insights = [
      "• Your highest performing raffle generated $X in revenue with a Y% conversion rate",
      "• User engagement has increased by Z% compared to the previous period",
      "• Mobile users account for X% of all raffle entries",
      "• Peak engagement times are between X and Y hours",
      "• Social media referrals drive X% of all traffic to your raffles",
    ]

    insights.forEach((insight, index) => {
      doc.text(insight, 20, 65 + index * 10)
    })

    // Recommendations section
    doc.setFontSize(14)
    doc.setTextColor(colors.primary)
    doc.text("Strategic Recommendations", 15, 130)

    doc.setFontSize(10)
    doc.setTextColor(colors.text)
    const recommendations = [
      "• Increase promotion frequency during peak engagement hours",
      "• Consider extending the duration of high-performing raffles",
      "• Optimize mobile experience to capture more entries",
      "• Implement email reminders for users who viewed but didn't enter",
      "• Test different prize values to determine optimal ROI",
    ]

    recommendations.forEach((recommendation, index) => {
      doc.text(recommendation, 20, 140 + index * 10)
    })

    // Next steps section
    doc.setFontSize(14)
    doc.setTextColor(colors.primary)
    doc.text("Next Steps", 15, 200)

    doc.setFontSize(10)
    doc.setTextColor(colors.text)
    const nextSteps = [
      "• Schedule a strategy session with your Raffily account manager",
      "• Review upcoming campaign calendar and adjust based on insights",
      "• Consider A/B testing different raffle formats for your audience",
      "• Explore integration with your loyalty program for enhanced results",
      "• Evaluate potential for cross-promotion with partner businesses",
    ]

    nextSteps.forEach((step, index) => {
      doc.text(step, 20, 210 + index * 10)
    })
  }

  // Generate the PDF
  addCoverPage()
  addSummaryPage()
  addDetailedDataPage()
  addInsightsPage()

  // Return the PDF as a buffer
  return doc.output("arraybuffer")
}
